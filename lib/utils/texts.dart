import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

class Locals {
  Locals(this.locale);

  final Locale locale;

  static Locals of(BuildContext context) => Localizations.of<Locals>(context, Locals);

  static const Map<String, Map<String, String>> _localized = const {
    'en': const {
      'name': 'Flutte',
      'subtitle': 'Simple Budgeting App',
      'title': 'Flutte - Simple Budgeting App',
      'today': 'Today',
      'tomorrow': 'Tomorrow',
      'yesterday': 'Yesterday',
      'amount': 'Amount',
      'note': 'Note',
      'save': 'Save',
      'selectMode': 'Have you received or spent your money?',
      'spent': 'Spent',
      'received': 'Received',
      'thisDay': 'This day',
      'thisMonth': 'This month',
      'total': 'Total',
      'dateAndTime': 'Date and time',
      'deleteTransaction': 'Delete transaction',
      'category': 'Category',
      'categorySelect': 'Select a category',
      'cat_null': 'Others',
      'cat_other': 'Other',
      'cat_parent_food': 'Food',
      'cat_parent_housing': 'Housing',
      'cat_parent_utilities': 'Utilities',
      'cat_parent_personal': 'Personal',
      'cat_parent_education': 'Education',
      'cat_parent_clothing': 'Clothing',
      'cat_parent_transportation': 'Transportation',
      'cat_parent_fun': 'Fun and gifts',
      'cat_parent_bills-giving': 'Finance',
      'cat_parent_health': 'Health',
      'cat_groceries': 'Groceries',
      'cat_restaurants': 'Restaurants',
      'cat_pub': 'Pubs',
      'cat_coffee': 'Coffee',
      'cat_small': 'Sweets and treats',
      'cat_supplies': 'Supplies',
      'cat_mortgage-rent': 'Mortgage or rent',
      'cat_hoa': 'Homeowner association',
      'cat_repairs': 'Repairs',
      'cat_furniture-furnishings': 'Furniture and furnishings',
      'cat_electricity': 'Electricity',
      'cat_water': 'Water',
      'cat_gas': 'Gas',
      'cat_heating': 'Heating',
      'cat_garbage': 'Garbage and services',
      'cat_phone': 'Phone',
      'cat_internet': 'Internet',
      'cat_tv': 'TV and cable',
      'cat_tobacco': 'Tobacco',
      'cat_gym': 'Gym',
      'cat_hair': 'Haircuts',
      'cat_cosmetics': 'Cosmetics',
      'cat_subscriptions': 'Subscriptions',
      'cat_books': 'Books and magazines',
      'cat_conferences': 'Conferences',
      'cat_shoes': 'Shoes',
      'cat_clothes': 'Clothes',
      'cat_underwear': 'Underwear',
      'cat_accessories': 'Accessories',
      'cat_parking': 'Parking',
      'cat_public': 'Public transport',
      'cat_bus': 'Busses',
      'cat_train': 'Trains',
      'cat_plane': 'Flights',
      'cat_fuel': 'Fuel',
      'cat_maintenance': 'Maintenance',
      'cat_entertainment': 'Entertainment',
      'cat_games': 'Games',
      'cat_vacations': 'Vacations',
      'cat_gifts': 'Gifts',
      'cat_debts': 'Debts',
      'cat_taxes': 'Taxes',
      'cat_loan': 'Loans',
      'cat_dontaions': 'Donations',
      'cat_insurance': 'Insurance',
      'cat_dental': 'Dental',
      'cat_special': 'Specialists',
      'cat_medications': 'Medications',
      'cat_investing': 'Investments',
    },
    'cs': const {
      'name': 'Flutte',
      'subtitle': 'Jednoduché plánování rozpočtu',
      'title': 'Flutte - Jednoduché plánování rozpočtu',
      'today': 'Dnes',
      'tomorrow': 'Zítra',
      'yesterday': 'Včera',
      'amount': 'Množství',
      'note': 'Poznámka',
      'save': 'Uložit',
      'selectMode': 'Utratil jsi nebo získal své peníze?',
      'spent': 'Utraceno',
      'received': 'Získáno',
      'thisDay': 'Tento den',
      'thisMonth': 'Tento měsíc',
      'total': 'Celkem',
      'dateAndTime': 'Datum a čas',
      'deleteTransaction': 'Smazat transakci',
      'category': 'Kategorie',
      'categorySelect': 'Zvolte kategorii',
      'cat_null': 'Ostatní',
      'cat_other': 'Ostatní',
      'cat_parent_food': 'Jídlo',
      'cat_parent_housing': 'Bydlení',
      'cat_parent_utilities': 'Služby a energie',
      'cat_parent_personal': 'Osobní',
      'cat_parent_education': 'Vzdělání',
      'cat_parent_clothing': 'Oblečení',
      'cat_parent_transportation': 'DOprava',
      'cat_parent_fun': 'Zábava a dárky',
      'cat_parent_bills-giving': 'Finance',
      'cat_parent_health': 'Zdraví',
      'cat_groceries': 'Potraviny',
      'cat_restaurants': 'Restaurace',
      'cat_pub': 'Pivnice a hospody',
      'cat_coffee': 'Káva',
      'cat_small': 'Drobnosti a pochutiny',
      'cat_supplies': 'Potřeby',
      'cat_mortgage-rent': 'Nájem a hypotéka',
      'cat_hoa': 'Společenství vlastníků',
      'cat_repairs': 'Opravy',
      'cat_furniture-furnishings': 'Nábytek a vybavení',
      'cat_electricity': 'Elektřina',
      'cat_water': 'Voda',
      'cat_gas': 'Plyn',
      'cat_heating': 'Vztápění',
      'cat_garbage': 'Odpady a služby',
      'cat_phone': 'Telefon',
      'cat_internet': 'Internet',
      'cat_tv': 'TV',
      'cat_tobacco': 'Tabák',
      'cat_gym': 'Posilovna',
      'cat_hair': 'Kadeřník',
      'cat_cosmetics': 'Kosmetika',
      'cat_subscriptions': 'Předplatné',
      'cat_books': 'Knihy a časopisy',
      'cat_conferences': 'Konference',
      'cat_shoes': 'Boty',
      'cat_clothes': 'Oblečení',
      'cat_underwear': 'Spodí prádlo',
      'cat_accessories': 'Doplňky',
      'cat_parking': 'Parkování',
      'cat_public': 'Veřejná doprava a MHD',
      'cat_bus': 'Autobusy',
      'cat_train': 'Vlaky',
      'cat_plane': 'Lety',
      'cat_fuel': 'Benzín',
      'cat_maintenance': 'Údržba',
      'cat_entertainment': 'Zábava',
      'cat_games': 'Hry',
      'cat_vacations': 'Dovolená',
      'cat_gifts': 'Dárky',
      'cat_debts': 'Dluhy',
      'cat_taxes': 'Dabě',
      'cat_loan': 'Půjčky',
      'cat_dontaions': 'Dobročinnost',
      'cat_insurance': 'Pojištění',
      'cat_dental': 'Zubař',
      'cat_special': 'Specialisté',
      'cat_medications': 'Léky',
      'cat_investing': 'Investice',
    }
  };

  String loc(String code) => _localized[locale.languageCode][code];
}

class LocalsDelegate extends LocalizationsDelegate<Locals> {
  const LocalsDelegate();

  @override
  bool isSupported(Locale locale) => ['en', 'cs'].contains(locale.languageCode);

  @override
  Future<Locals> load(Locale locale) => SynchronousFuture<Locals>(Locals(locale));

  @override
  bool shouldReload(LocalizationsDelegate<Locals> old) => false;
}
